head	1.1;
access;
symbols;
locks
	s0671361:1.1; strict;
comment	@// @;


1.1
date	2007.03.08.10.20.10;	author s0671361;	state Exp;
branches;
next	;


desc
@@


1.1
log
@Initial revision
@
text
@#include "G4RunManager.hh"
#include "GeDetTrackerSD.hh"
#include "GeDetTrackerHit.hh"
#include "GeDetEventAction.hh"
#include "G4VPhysicalVolume.hh"
#include "G4Step.hh"
#include "G4VTouchable.hh"
#include "G4TouchableHistory.hh"
#include "G4SDManager.hh"
#include "stdio.h"
#include "G4Allocator.hh"

GeDetTrackerSD::GeDetTrackerSD(G4String name):G4VSensitiveDetector(name)
{
  collectionName.insert(G4String("GeDetTrackerHit")+name);
  G4cout<<"Collection Name is "<<collectionName[0]<<G4endl;

  fCollection=NULL;

  fNelements=1+1;//numbering starts from 1 not 0
  fhitID=new G4int[fNelements];
  for(G4int i=0;i<fNelements;i++)fhitID[i]=-1;

  fHCID=-1;
  fNhits=0;
}


GeDetTrackerSD::~GeDetTrackerSD()
{

}

void GeDetTrackerSD ::Initialize(G4HCofThisEvent*)
{
  //Hits collections are deleted in G4RunManager, DoEventLoop
  //This calls StackPreviousEvent which deletes the G4Event
  //This deletes the hit collection for the event and thus MuGeHit s
  //G4cout<<"void MuGeSD::Initialize "<<SensitiveDetectorName<<G4endl;
  fCollection = new GeDetTrackerHitsCollection(SensitiveDetectorName,collectionName[0]);

}

G4bool GeDetTrackerSD::ProcessHits(G4Step* aStep,G4TouchableHistory*)
{ 
  
  G4double edep = aStep->GetTotalEnergyDeposit();
  if ((edep/keV == 0.)) return false;      
  
  // This TouchableHistory is used to obtain the physical volume
  // of the hit
  G4TouchableHistory* theTouchable
    = (G4TouchableHistory*)(aStep->GetPreStepPoint()->GetTouchable());
  
  G4VPhysicalVolume* volume=theTouchable->GetVolume();
  G4int id=volume->GetCopyNo();
  // G4cout<<volume->GetName()<<" id "<<id <<" edep "<<edep/MeV<<G4endl;
  if (fhitID[id]==-1){
    //if this crystal has already had a hit
    //don't make a new one, add on to old one.   
    //G4cout<<"Make hit "<<fCollection<<G4endl;    
    //GeDetTrackerHit* Hit = new GeDetTrackerHit;   
    GeDetTrackerHit* Hit = new GeDetTrackerHit();
    Hit->AddEnergy(edep);
    Hit->SetPos(aStep->GetPreStepPoint()->GetPosition());
    Hit->SetTime(aStep->GetPreStepPoint()->GetGlobalTime());
    fhitID[id] = fCollection->insert(Hit) -1;
    fNhits++;
  }
  else // This is not new
    {
    (*fCollection)[fhitID[id]]->AddEnergy(edep);
    }
  //G4cout<<"done "<<fNhits<<G4endl;
  return true;
}

void GeDetTrackerSD::EndOfEvent(G4HCofThisEvent* HCE)
{
  // G4cout<<"EndOfEvent( "<<fHCID<<" "<<fCollection<<" "<<fNhits<<G4endl;
  if(fHCID<0) fHCID = G4SDManager::GetSDMpointer()->GetCollectionID(collectionName[0]);
  if(fNhits)  HCE->AddHitsCollection(fHCID,fCollection);
  //G4cout<<"EndOfEvent( "<<G4endl;
  fNhits=0;
  //reset hit arrays
  for (G4int i=0;i<fNelements;i++) 
    {
      fhitID[i]=-1;
    }
  //G4cout<<"EndOfEvent( done"<<G4endl;
}

void GeDetTrackerSD::clear()
{} 


void GeDetTrackerSD ::DrawAll()
{} 


void GeDetTrackerSD::PrintAll()
{} 
@
